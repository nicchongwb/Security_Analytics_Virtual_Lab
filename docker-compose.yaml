# docker compose up -d
version: '2.10'

services:
# SuiteCRM
  c1:
    user: root
    image: suitecrm-server
    container_name: c1
    privileged: true
    network_mode: "none"
    tty: true
    stdin_open: true
    ports:
      - "8888:80"
  # c1:
    # build:
    #   context: .
    #   target: ubuntu-network
    # container_name: c1
    # privileged: true
    # network_mode: "none"
    # tty: true
    # stdin_open: true


  # TA1
  c2:
    image: ubuntu-network
    container_name: c2
    privileged: true
    network_mode: "none"
    stdin_open: true
    tty: true

  # Elasticsearch
  c3:
    image: elasticsearch
    container_name: c3
    restart: always
    privileged: true
    networks: 
      elk_nw:
        ipv4_address: 192.168.30.3
    volumes:
      # Bind-mounted configuration uses elasticsearch.yml to configure Elasticsearch on Docker
      - type: bind
        source: ./elk_configs/elasticsearch/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: admin
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      discovery.type: single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    stdin_open: true
    tty: true

  # Logstash
  c5:
    image: logstash
    container_name: c5
    restart: always
    privileged: true
    networks: 
      elk_nw:
        ipv4_address: 192.168.30.4
    stdin_open: true
    tty: true
    volumes:
      # Bind-mounted configuration uses logstash.conf to configure Logstash on Docker
      - type: bind
        source: ./elk_configs/logstash/logstash.conf
        target: /usr/share/logstash/pipeline/logstash.conf
        read_only: true
    depends_on:
      - c3
    ports:
      - "5044:5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"    

  # Kibana
  c6:
    image: kibana
    container_name: c6
    restart: always
    privileged: true
    networks: 
      elk_nw:
        ipv4_address: 192.168.30.5
    volumes:
      # Bind-mounted configuration uses kibana.yml to configure Kibana on Docker
      - type: bind
        source: ./elk_configs/kibana/kibana.yml
        target: /etc/kibana/kibana.yml
    ports:
    - '5601:5601'
    depends_on:
      - c3
    stdin_open: true
    tty: true

  # TA2 - Kali:
  c4:
    image: kali
    container_name: c4
    privileged: true
    network_mode: "none"
    environment:
      PG_SERVICE: postgresql@13-main
    cap_add:
      - NET_ADMIN
    stdin_open: true
    tty: true

  # Internal Router
  r1:
    image: ubuntu-network
    container_name: r1
    privileged: true
    network_mode: "none"
    tty: true
    stdin_open: true

  # DMZ Router
  r2:
    image: ubuntu-network
    container_name: r2
    privileged: true
    network_mode: "none"
    tty: true
    stdin_open: true

  # Monitoring Router
  r3:
    image: ubuntu-network
    container_name: r3
    privileged: true
    networks: 
      elk_nw:
        ipv4_address: 192.168.30.2
    tty: true
    stdin_open: true

networks:
  host_nw:
    name: host_nw
    driver: bridge
  elk_nw:
    name: elk_nw
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.30.0/24
   
volumes: 
  elasticsearch: 