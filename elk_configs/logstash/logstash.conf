input {
  beats {
    port => 5044
  }
}

filter {
  # Removal of default beats tag
  if "beats_input_codec_plain_applied" in [tags] {
    mutate {
      remove_tag => ["beats_input_codec_plain_applied"]
    }
  }

  # Parsing of Apache Access Log
  if "apache" in [tags] {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}"}
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    } 
  }

  # Parsing of Syslog
  else if "syslog" in [tags] {
    # Drop filebeat log entries
    if [message] =~ /(?i)filebeat/ {
      drop { }
    }
    else {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
        add_field => [ "received_at", "%{@timestamp}" ]
        add_field => [ "received_from", "%{host}" ]
      }
      date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    }
  }

  # Parsing of Authentication Logs (auth.log)
  else if "auth" in [tags] {
    if [message] =~ "sudo" {
      grok {
        match => { "message" => "%{SYSLOGTIMESTAMP:system.auth.timestamp} %{SYSLOGHOST:system.auth.hostname} sudo(?:\[%{POSINT:system.auth.pid}\])?: \s*%{DATA:system.auth.user} :( %{DATA:system.auth.sudo.error} ;)? TTY=%{DATA:system.auth.sudo.tty} ; PWD=%{DATA:system.auth.sudo.pwd} ; USER=%{DATA:system.auth.sudo.user} ; COMMAND=%{GREEDYDATA:system.auth.sudo.command}" }
      }
      date {
        match => [ "system.auth.timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
    }
    mutate {
      remove_tag => ["_grokparsefailure"]
    }
  }
}

output {
  elasticsearch {
    hosts => ["http://192.168.1.201:9200"]
  }
}
